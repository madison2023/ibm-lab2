[{"/Users/rachelmadison/lab-2-team-37/src/index.js":"1","/Users/rachelmadison/lab-2-team-37/src/App.js":"2","/Users/rachelmadison/lab-2-team-37/src/component/header/index.js":"3","/Users/rachelmadison/lab-2-team-37/src/component/header/header.js":"4","/Users/rachelmadison/lab-2-team-37/src/component/header/SearchItems.js":"5","/Users/rachelmadison/lab-2-team-37/src/component/header/SearchBars.js":"6","/Users/rachelmadison/lab-2-team-37/src/styles/colorScheme.js":"7"},{"size":199,"mtime":1624578470477,"results":"8","hashOfConfig":"9"},{"size":2657,"mtime":1625207825769,"results":"10","hashOfConfig":"9"},{"size":53,"mtime":1624578470477,"results":"11","hashOfConfig":"9"},{"size":1098,"mtime":1625207825771,"results":"12","hashOfConfig":"9"},{"size":7115,"mtime":1625283411573,"results":"13","hashOfConfig":"9"},{"size":7832,"mtime":1625207825770,"results":"14","hashOfConfig":"9"},{"size":278,"mtime":1625207825772,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"16jhdj0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rachelmadison/lab-2-team-37/src/index.js",[],["34","35"],"/Users/rachelmadison/lab-2-team-37/src/App.js",["36","37"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport Header from \"./component/header\";\nimport SearchItems from \"./component/header/SearchItems\";\nimport SearchBars from \"./component/header/SearchBars\";\nimport Container from \"@material-ui/core/Container\";\nimport { Paper } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport \"./App.css\";                               \n\nfunction App() {\n  // we store the state of these queries here so that the `SearchItems` component may also access it\n  const [cityQuery, setCityQuery] = useState(\"\");\n  const [nameQuery, setNameQuery] = useState(\"\");\n\n  // get entire JSON as list of objects\n  const [entireList, setEntireList] = useState([]); // entire JSON, leave alone\n  const [displayList, setDisplayList] = useState([]); // list to actually display\n  const getPostData = useCallback(async () => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\").then(jsonData => {\n        setEntireList(jsonData.data);\n        setDisplayList((jsonData.data).sort((a, b) => (a.name > b.name) ? 1 : -1));\n      }).catch(error => console.log(error));\n  }, []); // empty array means run only once\n  useEffect(() => {\n    getPostData()\n  }, []); // empty array means run only once\n\n  /**\n   * Function to assign setCityQuery() to the city search field.\n   * \n   * @param {Event} e accesses the value in the text field DOMNode via e.target\n   */\n  const updateCityQuery = (e) => {\n    setCityQuery(e.target.value);\n  };\n\n  /**\n   * Function to assign setNameQuery() to the name search field.\n   * \n   * @param {Event} e accesses the value in the text field DOMNode via e.target\n   */\n  const updateNameQuery = (e) => {\n    setNameQuery(e.target.value);\n  };\n\n  /**\n   * Function to assign setDisplayList() to the sort select menu and delete buttons.\n   * \n   * @param {array} newList the new list to set as displayList\n   */\n  const updateDisplayList = (newList) => {\n    setDisplayList(newList);\n  }\n\n  /** Function to restore displayList, to assign to the restore button. */\n  const restoreEntireList = () => {\n    setDisplayList(entireList);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      \n      <SearchBars\n        entireList={entireList}\n        displayList={displayList}\n        updateDisplayList={updateDisplayList}\n        updateCityQuery={updateCityQuery}\n        updateNameQuery={updateNameQuery}\n        restoreEntireList={restoreEntireList}\n      />\n      <Container fixed>\n        <SearchItems updateDisplayList={updateDisplayList} displayList={displayList} cityQuery={cityQuery} nameQuery={nameQuery} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/rachelmadison/lab-2-team-37/src/component/header/index.js",[],"/Users/rachelmadison/lab-2-team-37/src/component/header/header.js",["38","39","40"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ColorScheme from '../../styles/colorScheme';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    color: 'black',\n    letterSpacing: '0.3rem'\n  },\n  appBar: {\n    marginBottom: '2rem',\n    paddingTop: '1rem'\n  },\n}));\n\nexport default function Header(){\n    const classes = useStyles();\n    return <div className={classes.root}>\n    <AppBar position=\"static\" style={{backgroundColor: ColorScheme.darkYellow}} class={classes.appBar}>\n      <Toolbar>\n        <Typography variant=\"h3\" className={classes.title}>\n          The Yellow Page\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  </div>\n}","/Users/rachelmadison/lab-2-team-37/src/component/header/SearchItems.js",["41","42"],"/Users/rachelmadison/lab-2-team-37/src/component/header/SearchBars.js",["43"],"import React, { useState, useEffect } from \"react\";\n\nimport PropTypes from 'prop-types';\n\nimport Button from \"@material-ui/core/Button\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport RestoreFromTrashIcon from '@material-ui/icons/RestoreFromTrash';\nimport Select from \"@material-ui/core/Select\";\nimport ColorScheme from \"../../styles/colorScheme\";\nimport TextField from \"@material-ui/core/TextField\";\n\n\n/* Styling */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\n/** Button to restore deleted entries. */\nfunction RestoreButton(props) {\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant=\"contained\"\n      style={{backgroundColor: ColorScheme.gray}}\n      className={classes.button}\n      endIcon={<RestoreFromTrashIcon />}\n      onClick={() => {\n        props.restoreEntireList();\n      }}\n    >\n      Restore\n    </Button>\n  );\n}\n\nRestoreButton.propTypes = {\n  /** Function that restores list of users to original state (no deletions) */\n  restoreEntireList: PropTypes.func,\n}\n\n/** Select drop-down menu to pick sort type for the list of search results. */\nfunction SortSelect(props) {\n  const classes = useStyles();\n\n  // state can be used outside of handleChange() to get the current sort:\n  const [state, setState] = React.useState({\n    sortby: \"f\",\n  });\n  const handleChange = (event) => {\n    const name = event.target.name;\n    setState({\n      ...state,\n      [name]: event.target.value,\n    });\n  };\n\n  // Any time the sort menu changes, keep track of current sort selection:\n  useEffect(() => {\n    if (state.sortby === \"f\") { // first name sort\n      nameSort(props.list, props.setList, false);\n    } else if (state.sortby === \"l\") { // last name sort\n      nameSort(props.list, props.setList, true);\n    } else if (state.sortby === \"c\") { // city name sort\n      citySort(props.list, props.setList);\n    } else if (state.sortby === \"d\") { // distance from user sort\n      distanceSort(props.list, props.setList);\n    }\n  }, [state]);\n\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them alphabetically by name.\n   * \n   * @param {array} list user objects\n   * @param {function} setList function to mutate list of user objects\n   * @param {boolean} lastName sort by last name (true) or first name (false)\n   */\n   function nameSort(list, setList, lastName) {\n    let sorted = [...list]; // sorted is displayList from App\n    if (lastName) {\n      sorted.sort((a, b) =>\n        a.name.substring(a.name.indexOf(\" \") + 1) >\n        b.name.substring(b.name.indexOf(\" \") + 1)\n          ? 1\n          : -1\n      );\n    } else {\n      sorted.sort((a, b) => (a.name > b.name ? 1 : -1));\n    }\n    setList(sorted);\n  }\n\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them alphabetically by city name.\n   * \n   * @param {array} list user objects\n   * @param {function} setList function to mutate list of user objects\n   */\n  function citySort(list, setList) {\n    let sorted = [...list]; // sorted is displayList from App\n    sorted.sort((a, b) => (a.address.city > b.address.city) ? 1 : -1);\n    setList(sorted);\n  }\n\n  // Get user's location (if something goes wrong, no option to distance sort)\n  const [myLat, setMyLat] = useState(NaN);\n  const [myLong, setMyLong] = useState(NaN);\n  const [enableDistSort, setEnableDistSort] = useState(true);\n  // useEffect ensures myLat and myLong aren't accessed before getting set:\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        ((position) => { // successfully read position\n          setMyLat(position.coords.latitude);\n          setMyLong(position.coords.longitude);\n          setEnableDistSort(true);\n        }), (() => { // error (permissions denied, etc.)\n          setEnableDistSort(false);\n        })\n      )\n    }\n  });\n\n  /**\n   * Given the latitude and longitude of two points on the roughly spherical\n   * Earth, calculates the approximate distance between them in km.\n   * \n   * @param {number} myLat latitude of the first point\n   * @param {number} theirLat latitude of the second point\n   * @param {number} myLong longitude of the first point\n   * @param {number} theirLong longitude of the second point\n   * @returns approximate distance between points 1 and 2 in m\n   * @see https://en.wikipedia.org/wiki/Haversine_formula\n   */\n  function getDistance(myLat, theirLat, myLong, theirLong) {\n    const R = 6371e3; // radius of the Earth in m\n    let lat1 = myLat * Math.PI/180; // converting to degrees\n    let lat2 = theirLat * Math.PI/180;\n    let long1 = myLong * Math.PI/180;\n    let long2 = theirLong * Math.PI/180;\n    const a = Math.sin((lat2-lat1)/2) * Math.sin((lat2-lat1)/2) +\n      Math.cos(lat1) * Math.cos(lat2) * Math.sin((long2-long1)/2) *\n      Math.sin((long2-long1)/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c; // distance in m\n  }\n\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them from closest to furthest from the client's coordinates.\n   * \n   * @param {array} list \n   * @param {function} setList \n   */\n  function distanceSort(list, setList) {\n    const sorted = list.map(u => ({\n      id: u.id,\n      name: u.name,\n      username: u.username,\n      email: u.email,\n      address: u.address,\n      phone: u.phone,\n      website: u.website,\n      company: u.company,\n      distance: getDistance(myLat, u.address.geo.lat, myLong, u.address.geo.lng)\n    }));\n    sorted.sort((a, b) => (a.distance > b.distance) ? 1 : -1);\n    setList(sorted);\n  }\n\n  return (\n    <FormControl variant=\"outlined\" className={classes.formControl}>\n      <InputLabel htmlFor=\"sort-select\">Sort</InputLabel>\n      <Select\n        native\n        value={state.sortby}\n        onChange={handleChange}\n        label=\"Sort\"\n        inputProps={{\n          name: \"sortby\",\n          id: \"sort-select\",\n        }}\n      >\n        <option value={\"f\"}>First name, A-Z</option>\n        <option value={\"l\"}>Last name, A-Z</option>\n        <option value={\"c\"}>City, A-Z</option>\n        {enableDistSort && <option value={\"d\"}>Distance</option>}\n      </Select>\n    </FormControl>\n  );\n}\n\nSortSelect.propTypes = {\n  /** List to sort upon changing state of drop-down menu */\n  list: PropTypes.array,\n  /** Function to update that list */\n  setList: PropTypes.func,\n};\n\n/**\n * Renders two search text fields, a sort type drop-down menu, and a search\n * button to search through a list of user objects.\n */\nexport default function SearchBars(props) {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"CitySearch\"\n          label=\"City\"\n          variant=\"outlined\"\n          onChange={props.updateCityQuery}\n        />\n        <TextField\n          id=\"NameSearch\"\n          label=\"Name\"\n          variant=\"outlined\"\n          onChange={props.updateNameQuery}\n        />\n      <SortSelect list={props.displayList} setList={props.updateDisplayList}/>\n      <RestoreButton restoreEntireList={props.restoreEntireList} />\n    </form>\n  );\n}\n\nSearchBars.propTypes = {\n  /** List of search results to display */\n  displayList: PropTypes.array,\n  /** Function to update the city query */\n  updateCityQuery: PropTypes.func,\n  /** Function to update the list of search results to display */\n  updateDisplayList: PropTypes.func,\n  /** Function to update the name query */\n  updateNameQuery: PropTypes.func,\n};\n","/Users/rachelmadison/lab-2-team-37/src/styles/colorScheme.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":6,"column":10,"nodeType":"50","messageId":"51","endLine":6,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":27,"column":6,"nodeType":"54","endLine":27,"endColumn":8,"suggestions":"55"},{"ruleId":"48","severity":1,"message":"56","line":6,"column":8,"nodeType":"50","messageId":"51","endLine":6,"endColumn":14},{"ruleId":"48","severity":1,"message":"57","line":7,"column":8,"nodeType":"50","messageId":"51","endLine":7,"endColumn":18},{"ruleId":"48","severity":1,"message":"58","line":8,"column":8,"nodeType":"50","messageId":"51","endLine":8,"endColumn":16},{"ruleId":"48","severity":1,"message":"59","line":141,"column":17,"nodeType":"50","messageId":"51","endLine":141,"endColumn":25},{"ruleId":"60","severity":1,"message":"61","line":188,"column":38,"nodeType":"62","messageId":"63","endLine":188,"endColumn":40},{"ruleId":"52","severity":1,"message":"64","line":83,"column":6,"nodeType":"54","endLine":83,"endColumn":13,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPostData'. Either include it or remove the dependency array.","ArrayExpression",["68"],"'Button' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'setDense' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'distanceSort', 'props.list', and 'props.setList'. Either include them or remove the dependency array.",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [getPostData]",{"range":"74","text":"75"},"Update the dependencies array to be: [distanceSort, props.list, props.setList, state]",{"range":"76","text":"77"},[1205,1207],"[getPostData]",[2295,2302],"[distanceSort, props.list, props.setList, state]"]