{"ast":null,"code":"var _jsxFileName = \"/Users/rachelmadison/lab-2-team-37/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Header from \"./component/header\";\nimport SearchItems from \"./component/header/SearchItems\";\nimport SearchBars from \"./component/header/SearchBars\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // we store the state of these queries here so that the `SearchItems` component may also access it\n  const [cityQuery, setCityQuery] = useState(\"\");\n  const [nameQuery, setNameQuery] = useState(\"\"); // get entire JSON as list of objects\n\n  const [entireList, setEntireList] = useState([]); // entire JSON, leave alone\n\n  const [displayList, setDisplayList] = useState([]); // list to actually display\n\n  const getPostData = useCallback(async () => {\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then(jsonData => {\n      setEntireList(jsonData.data);\n      setDisplayList(jsonData.data.sort((a, b) => a.name > b.name ? 1 : -1));\n    }).catch(error => console.log(error));\n  }, []); // empty array means run only once\n\n  useEffect(() => {\n    getPostData();\n  }, []); // empty array means run only once\n\n  const updateCityQuery = e => {\n    setCityQuery(e.target.value);\n  };\n\n  const updateNameQuery = e => {\n    setNameQuery(e.target.value);\n  };\n\n  const updateDisplayList = newList => {\n    setDisplayList(newList);\n  };\n\n  const restoreEntireList = () => {\n    setDisplayList(entireList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBars, {\n      entireList: entireList,\n      displayList: displayList,\n      updateDisplayList: updateDisplayList,\n      updateCityQuery: updateCityQuery,\n      updateNameQuery: updateNameQuery,\n      restoreEntireList: restoreEntireList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fixed: true,\n      children: /*#__PURE__*/_jsxDEV(SearchItems, {\n        updateDisplayList: updateDisplayList,\n        displayList: displayList,\n        cityQuery: cityQuery,\n        nameQuery: nameQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vZ3ndKgZ2t7I/6vW031zC8YD8Cg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rachelmadison/lab-2-team-37/src/App.js"],"names":["React","useState","useEffect","useCallback","Header","SearchItems","SearchBars","Container","axios","App","cityQuery","setCityQuery","nameQuery","setNameQuery","entireList","setEntireList","displayList","setDisplayList","getPostData","get","then","jsonData","data","sort","a","b","name","catch","error","console","log","updateCityQuery","e","target","value","updateNameQuery","updateDisplayList","newList","restoreEntireList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C,CAHa,CAKb;;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C,CANa,CAMqC;;AAClD,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C,CAPa,CAOuC;;AACpD,QAAMiB,WAAW,GAAGf,WAAW,CAAC,YAAY;AAC1CK,IAAAA,KAAK,CACFW,GADH,CACO,4CADP,EACqDC,IADrD,CAC0DC,QAAQ,IAAI;AAClEN,MAAAA,aAAa,CAACM,QAAQ,CAACC,IAAV,CAAb;AACAL,MAAAA,cAAc,CAAEI,QAAQ,CAACC,IAAV,CAAgBC,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAxD,CAAD,CAAd;AACD,KAJH,EAIKC,KAJL,CAIWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJpB;AAKD,GAN8B,EAM5B,EAN4B,CAA/B,CARa,CAcL;;AACR1B,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT,CAfa,CAiBL;;AAER,QAAMa,eAAe,GAAIC,CAAD,IAAO;AAC7BrB,IAAAA,YAAY,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAIH,CAAD,IAAO;AAC7BnB,IAAAA,YAAY,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACD,GAFD;;AAIA,QAAME,iBAAiB,GAAIC,OAAD,IAAa;AACrCpB,IAAAA,cAAc,CAACoB,OAAD,CAAd;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BrB,IAAAA,cAAc,CAACH,UAAD,CAAd;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AACE,MAAA,UAAU,EAAEA,UADd;AAEE,MAAA,WAAW,EAAEE,WAFf;AAGE,MAAA,iBAAiB,EAAEoB,iBAHrB;AAIE,MAAA,eAAe,EAAEL,eAJnB;AAKE,MAAA,eAAe,EAAEI,eALnB;AAME,MAAA,iBAAiB,EAAEG;AANrB;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE,QAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA,6BACE,QAAC,WAAD;AAAa,QAAA,iBAAiB,EAAEF,iBAAhC;AAAmD,QAAA,WAAW,EAAEpB,WAAhE;AAA6E,QAAA,SAAS,EAAEN,SAAxF;AAAmG,QAAA,SAAS,EAAEE;AAA9G;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnDQH,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Header from \"./component/header\";\nimport SearchItems from \"./component/header/SearchItems\";\nimport SearchBars from \"./component/header/SearchBars\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\nimport \"./App.css\";                               \n\nfunction App() {\n  // we store the state of these queries here so that the `SearchItems` component may also access it\n  const [cityQuery, setCityQuery] = useState(\"\");\n  const [nameQuery, setNameQuery] = useState(\"\");\n\n  // get entire JSON as list of objects\n  const [entireList, setEntireList] = useState([]); // entire JSON, leave alone\n  const [displayList, setDisplayList] = useState([]); // list to actually display\n  const getPostData = useCallback(async () => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\").then(jsonData => {\n        setEntireList(jsonData.data);\n        setDisplayList((jsonData.data).sort((a, b) => (a.name > b.name) ? 1 : -1));\n      }).catch(error => console.log(error));\n  }, []); // empty array means run only once\n  useEffect(() => {\n    getPostData()\n  }, []); // empty array means run only once\n\n  const updateCityQuery = (e) => {\n    setCityQuery(e.target.value);\n  };\n\n  const updateNameQuery = (e) => {\n    setNameQuery(e.target.value);\n  };\n\n  const updateDisplayList = (newList) => {\n    setDisplayList(newList);\n  }\n\n  const restoreEntireList = () => {\n    setDisplayList(entireList);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <SearchBars\n        entireList={entireList}\n        displayList={displayList}\n        updateDisplayList={updateDisplayList}\n        updateCityQuery={updateCityQuery}\n        updateNameQuery={updateNameQuery}\n        restoreEntireList={restoreEntireList}\n      />\n      <Container fixed>\n        <SearchItems updateDisplayList={updateDisplayList} displayList={displayList} cityQuery={cityQuery} nameQuery={nameQuery} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}