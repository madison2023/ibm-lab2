{"ast":null,"code":"var _jsxFileName = \"/Users/rachelmadison/lab-2-team-37/src/component/header/SearchBars.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport RestoreFromTrashIcon from '@material-ui/icons/RestoreFromTrash';\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\"\n    }\n  },\n  button: {\n    margin: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n}));\n/** Button to restore deleted entries. */\n\nfunction RestoreButton(props) {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    endIcon: /*#__PURE__*/_jsxDEV(RestoreFromTrashIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this),\n    onClick: () => {\n      props.restoreEntireList();\n    },\n    children: \"Restore\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n/** Select drop-down menu to pick sort type for the list of search results. */\n\n\n_s(RestoreButton, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = RestoreButton;\n\nfunction SortSelect(props) {\n  _s2();\n\n  const classes = useStyles(); // state can be used outside of handleChange() to get the current sort:\n\n  const [state, setState] = React.useState({\n    sortby: \"n\"\n  });\n\n  const handleChange = event => {\n    const name = event.target.name;\n    setState({ ...state,\n      [name]: event.target.value\n    });\n  }; // Any time the sort menu changes, keep track of current sort selection:\n\n\n  useEffect(() => {\n    if (state.sortby === \"f\") {\n      nameSort(props.list, props.setList, false);\n    } else if (state.sortby === \"l\") {\n      nameSort(props.list, props.setList, true);\n    } else if (state.sortby === \"c\") {\n      citySort(props.list, props.setList);\n    } else if (state.sortby === \"d\") {\n      distanceSort(props.list, props.setList);\n    }\n  }, [state]);\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them alphabetically by name.\n   * \n   * @param {array} list user objects\n   * @param {function} setList function to mutate list of user objects\n   * @param {boolean} lastName sort by last name (true) or first name (false)\n   */\n\n  function nameSort(list, setList, lastName) {\n    let sorted = [...list]; // sorted is displayList from App\n\n    if (lastName) {\n      sorted.sort((a, b) => a.name.substring(a.name.indexOf(\" \") + 1) > b.name.substring(b.name.indexOf(\" \") + 1) ? 1 : -1);\n    } else {\n      sorted.sort((a, b) => a.name > b.name ? 1 : -1);\n    }\n\n    setList(sorted);\n  }\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them alphabetically by city name.\n   * \n   * @param {array} list user objects\n   * @param {function} setList function to mutate list of user objects\n   */\n\n\n  function citySort(list, setList) {\n    let sorted = [...list]; // sorted is displayList from App\n\n    sorted.sort((a, b) => a.address.city > b.address.city ? 1 : -1);\n    setList(sorted);\n  } // Get user's location (if something goes wrong, don't bother sorting)\n\n\n  const [myLat, setMyLat] = useState(NaN);\n  const [myLong, setMyLong] = useState(NaN);\n  const [enableDistSort, setEnableDistSort] = useState(true); // useEffect ensures myLat and myLong aren't accessed before getting set:\n\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        // successfully read position\n        setMyLat(position.coords.latitude);\n        setMyLong(position.coords.longitude);\n        setEnableDistSort(true);\n      }, () => {\n        // error (permissions denied, etc.)\n        setEnableDistSort(false);\n      });\n    }\n  });\n  /**\n   * Given the latitude and longitude of two points on the roughly spherical\n   * Earth, calculates the approximate distance between them in km.\n   * \n   * @param {number} myLat latitude of the first point\n   * @param {number} theirLat latitude of the second point\n   * @param {number} myLong longitude of the first point\n   * @param {number} theirLong longitude of the second point\n   * @returns approximate distance between points 1 and 2 in m\n   * @see https://en.wikipedia.org/wiki/Haversine_formula\n   */\n\n  function getDistance(myLat, theirLat, myLong, theirLong) {\n    const R = 6371e3; // radius of the Earth in m\n\n    let lat1 = myLat * Math.PI / 180; // converting to degrees\n\n    let lat2 = theirLat * Math.PI / 180;\n    let long1 = myLong * Math.PI / 180;\n    let long2 = theirLong * Math.PI / 180;\n    const a = Math.sin((lat2 - lat1) / 2) * Math.sin((lat2 - lat1) / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin((long2 - long1) / 2) * Math.sin((long2 - long1) / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // distance in m\n  }\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them from closest to furthest from the client's coordinates.\n   * \n   * @param {array} list \n   * @param {function} setList \n   */\n\n\n  function distanceSort(list, setList) {\n    const sorted = list.map(u => ({\n      id: u.id,\n      name: u.name,\n      username: u.username,\n      email: u.email,\n      address: u.address,\n      phone: u.phone,\n      website: u.website,\n      company: u.company,\n      distance: getDistance(myLat, u.address.geo.lat, myLong, u.address.geo.lng)\n    }));\n    sorted.sort((a, b) => a.distance > b.distance ? 1 : -1);\n    setList(sorted);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      htmlFor: \"sort-select\",\n      children: \"Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      native: true,\n      value: state.sortby,\n      onChange: handleChange,\n      label: \"Sort\",\n      inputProps: {\n        name: \"sortby\",\n        id: \"sort-select\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"f\",\n        children: \"First name, A-Z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"l\",\n        children: \"Last name, A-Z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"c\",\n        children: \"City, A-Z\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), enableDistSort && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"d\",\n        children: \"Distance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(SortSelect, \"1XGvjWdqpARKyRtjg9D0auYtVJ8=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = SortSelect;\nSortSelect.propTypes = {\n  /** List to sort upon changing state of drop-down menu */\n  list: PropTypes.array,\n\n  /** Function to update that list */\n  setList: PropTypes.func\n};\n/**\n * Renders two search text fields, a sort type drop-down menu, and a search\n * button to search through a list of user objects.\n */\n\nexport default function SearchBars(props) {\n  _s3();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"CitySearch\",\n      label: \"City\",\n      variant: \"outlined\",\n      onChange: props.updateCityQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"NameSearch\",\n      label: \"Last Name\",\n      variant: \"outlined\",\n      onChange: props.updateNameQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SortSelect, {\n      list: props.displayList,\n      setList: props.updateDisplayList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RestoreButton, {\n      restoreEntireList: props.restoreEntireList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(SearchBars, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = SearchBars;\nSearchBars.propTypes = {\n  /** List of search results to display */\n  displayList: PropTypes.array,\n\n  /** ... */\n  updateCityQuery: PropTypes.func,\n  // did I guess right? function?\n\n  /** Function to update the list of search results to display */\n  updateDisplayList: PropTypes.func,\n\n  /** ... */\n  updateNameQuery: PropTypes.func // did I guess right? function?\n\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RestoreButton\");\n$RefreshReg$(_c2, \"SortSelect\");\n$RefreshReg$(_c3, \"SearchBars\");","map":{"version":3,"sources":["/Users/rachelmadison/lab-2-team-37/src/component/header/SearchBars.js"],"names":["React","useState","useEffect","PropTypes","makeStyles","TextField","Button","SearchIcon","RestoreFromTrashIcon","InputLabel","FormControl","Select","useStyles","theme","root","margin","spacing","width","button","formControl","minWidth","RestoreButton","props","classes","restoreEntireList","SortSelect","state","setState","sortby","handleChange","event","name","target","value","nameSort","list","setList","citySort","distanceSort","lastName","sorted","sort","a","b","substring","indexOf","address","city","myLat","setMyLat","NaN","myLong","setMyLong","enableDistSort","setEnableDistSort","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getDistance","theirLat","theirLong","R","lat1","Math","PI","lat2","long1","long2","sin","cos","c","atan2","sqrt","map","u","id","username","email","phone","website","company","distance","geo","lat","lng","propTypes","array","func","SearchBars","updateCityQuery","updateNameQuery","displayList","updateDisplayList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport RestoreFromTrashIcon from '@material-ui/icons/RestoreFromTrash';\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\n/** Button to restore deleted entries. */\nfunction RestoreButton(props) {\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      className={classes.button}\n      endIcon={<RestoreFromTrashIcon />}\n      onClick={() => {\n        props.restoreEntireList();\n      }}\n    >\n      Restore\n    </Button>\n  );\n}\n\n\n/** Select drop-down menu to pick sort type for the list of search results. */\nfunction SortSelect(props) {\n  const classes = useStyles();\n\n  // state can be used outside of handleChange() to get the current sort:\n  const [state, setState] = React.useState({\n    sortby: \"n\",\n  });\n  const handleChange = (event) => {\n    const name = event.target.name;\n    setState({\n      ...state,\n      [name]: event.target.value,\n    });\n  };\n\n  // Any time the sort menu changes, keep track of current sort selection:\n  useEffect(() => {\n    if (state.sortby === \"f\") {\n      nameSort(props.list, props.setList, false);\n    } else if (state.sortby === \"l\") {\n      nameSort(props.list, props.setList, true);\n    } else if (state.sortby === \"c\") {\n      citySort(props.list, props.setList);\n    } else if (state.sortby === \"d\") {\n      distanceSort(props.list, props.setList);\n    }\n  }, [state]);\n\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them alphabetically by name.\n   * \n   * @param {array} list user objects\n   * @param {function} setList function to mutate list of user objects\n   * @param {boolean} lastName sort by last name (true) or first name (false)\n   */\n   function nameSort(list, setList, lastName) {\n    let sorted = [...list]; // sorted is displayList from App\n    if (lastName) {\n      sorted.sort((a, b) =>\n        a.name.substring(a.name.indexOf(\" \") + 1) >\n        b.name.substring(b.name.indexOf(\" \") + 1)\n          ? 1\n          : -1\n      );\n    } else {\n      sorted.sort((a, b) => (a.name > b.name ? 1 : -1));\n    }\n    setList(sorted);\n  }\n\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them alphabetically by city name.\n   * \n   * @param {array} list user objects\n   * @param {function} setList function to mutate list of user objects\n   */\n  function citySort(list, setList) {\n    let sorted = [...list]; // sorted is displayList from App\n    sorted.sort((a, b) => (a.address.city > b.address.city) ? 1 : -1);\n    setList(sorted);\n  }\n\n  // Get user's location (if something goes wrong, don't bother sorting)\n  const [myLat, setMyLat] = useState(NaN);\n  const [myLong, setMyLong] = useState(NaN);\n  const [enableDistSort, setEnableDistSort] = useState(true);\n  // useEffect ensures myLat and myLong aren't accessed before getting set:\n  useEffect(() => {if ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(\n      ((position) => { // successfully read position\n        setMyLat(position.coords.latitude);\n        setMyLong(position.coords.longitude);\n        setEnableDistSort(true);\n      }), (() => { // error (permissions denied, etc.)\n        setEnableDistSort(false);\n      })\n    )\n  }});\n\n  /**\n   * Given the latitude and longitude of two points on the roughly spherical\n   * Earth, calculates the approximate distance between them in km.\n   * \n   * @param {number} myLat latitude of the first point\n   * @param {number} theirLat latitude of the second point\n   * @param {number} myLong longitude of the first point\n   * @param {number} theirLong longitude of the second point\n   * @returns approximate distance between points 1 and 2 in m\n   * @see https://en.wikipedia.org/wiki/Haversine_formula\n   */\n  function getDistance(myLat, theirLat, myLong, theirLong) {\n    const R = 6371e3; // radius of the Earth in m\n    let lat1 = myLat * Math.PI/180; // converting to degrees\n    let lat2 = theirLat * Math.PI/180;\n    let long1 = myLong * Math.PI/180;\n    let long2 = theirLong * Math.PI/180;\n    const a = Math.sin((lat2-lat1)/2) * Math.sin((lat2-lat1)/2) +\n      Math.cos(lat1) * Math.cos(lat2) * Math.sin((long2-long1)/2) *\n      Math.sin((long2-long1)/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c; // distance in m\n  }\n\n  /**\n   * Given a list of user objects to sort and a function to mutate it with, sort\n   * them from closest to furthest from the client's coordinates.\n   * \n   * @param {array} list \n   * @param {function} setList \n   */\n  function distanceSort(list, setList) {\n    const sorted = list.map(u => ({\n      id: u.id,\n      name: u.name,\n      username: u.username,\n      email: u.email,\n      address: u.address,\n      phone: u.phone,\n      website: u.website,\n      company: u.company,\n      distance: getDistance(myLat, u.address.geo.lat, myLong, u.address.geo.lng)\n    }));\n    sorted.sort((a, b) => (a.distance > b.distance) ? 1 : -1);\n    setList(sorted);\n  }\n\n  return (\n    <FormControl variant=\"outlined\" className={classes.formControl}>\n      <InputLabel htmlFor=\"sort-select\">Sort</InputLabel>\n      <Select\n        native\n        value={state.sortby}\n        onChange={handleChange}\n        label=\"Sort\"\n        inputProps={{\n          name: \"sortby\",\n          id: \"sort-select\",\n        }}\n      >\n        <option value={\"f\"}>First name, A-Z</option>\n        <option value={\"l\"}>Last name, A-Z</option>\n        <option value={\"c\"}>City, A-Z</option>\n        {enableDistSort && <option value={\"d\"}>Distance</option>}\n      </Select>\n    </FormControl>\n  );\n}\n\nSortSelect.propTypes = {\n  /** List to sort upon changing state of drop-down menu */\n  list: PropTypes.array,\n  /** Function to update that list */\n  setList: PropTypes.func,\n};\n\n/**\n * Renders two search text fields, a sort type drop-down menu, and a search\n * button to search through a list of user objects.\n */\nexport default function SearchBars(props) {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"CitySearch\"\n          label=\"City\"\n          variant=\"outlined\"\n          onChange={props.updateCityQuery}\n        />\n        <TextField\n          id=\"NameSearch\"\n          label=\"Last Name\"\n          variant=\"outlined\"\n          onChange={props.updateNameQuery}\n        />\n      <SortSelect list={props.displayList} setList={props.updateDisplayList}/>\n\n\n      <RestoreButton restoreEntireList={props.restoreEntireList} />\n    </form>\n  );\n}\n\nSearchBars.propTypes = {\n  /** List of search results to display */\n  displayList: PropTypes.array,\n  /** ... */\n  updateCityQuery: PropTypes.func, // did I guess right? function?\n  /** Function to update the list of search results to display */\n  updateDisplayList: PropTypes.func,\n  /** ... */\n  updateNameQuery: PropTypes.func, // did I guess right? function?\n};\n"]},"metadata":{},"sourceType":"module"}